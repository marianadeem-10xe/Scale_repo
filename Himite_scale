import numpy as np
from PIL import Image

# Import image and get its dimensions
image = np.array([[10,20],[30,40]])
width, height = image.shape[1], image.shape[0]

# Create a new empty image
new_width, new_height = 4, 4
scaled_image = np.zeros((new_height, new_width), dtype = "float32")

# These guys will help us
scale_x = new_width/width
scale_y = new_height/height

# Fill in every pixel in the scaled image
for y in range(new_height):
    for x in range(new_width):
        # Coordinates in old image
        x_ = x/scale_x
        y_ = y/scale_y

        # Finding neighboring points
        x1 = min(int(np.floor(x_)), width-1)
        y1 = min(int(np.floor(y_)), height-1)
        x2 = min(int(np.ceil(x_)), width-1)
        y2 = min(int(np.ceil(y_)), height-1)

        Q11 = image[y1, x1]
        Q12 = image[x2, y1]
        Q21 = image[x1, y2]
        Q22 = image[x2, y2]

        # Interpolating P1 and P2
        P1 = (x2-x_)*Q11 + (x_-x1)*Q12
        P2 = (x2-x_)*Q21 + (x_-x1)*Q22

        if x1 == x2:
            P1 = Q11
            P2 = Q22

        # Interpolating P
        P = (y2-y_)*P1 + (y_-y1)*P2

        # Rounding P to an int tuple
        P = np.round(P).astype(int)

        scaled_image[y,x] =  P

print(scaled_image)